from telethon import events
from .. import loader, utils
import asyncio
import re
import os
import time


class banan(loader.Module):
    """
    –ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–Ω–∞ ü•µ –∏–∑-–∑–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç @j_0_k_e.
    """
    strings = {"name": "rassil"}

    def __init__(self):
        self.chats_file = "chats_list.txt"
        self.chats = self.load_chats()
        self.message_to_send = None
        self.interval = 10  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –º–∏–Ω—É—Ç–∞—Ö
        self.running = False  # –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        self.last_sent_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É

    async def client_ready(self, client, db):
        self.client = client

    def load_chats(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã, –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ –≤ ID."""
        if os.path.exists(self.chats_file):
            with open(self.chats_file, "r") as file:
                chats = [line.strip() for line in file.readlines() if line.strip()]
            
            updated_chats = []
            for chat in set(chats):
                parts = chat.split(" | ")
                chat_id = parts[0]
                chat_link = parts[1] if len(parts) > 1 else "Unknown"
                chat_name = parts[2] if len(parts) > 2 else "Unknown"

                if chat_id.startswith("@"):  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–≥
                    try:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥ –≤ ID
                        entity = self.client.get_entity(chat_id)
                        chat_id = str(entity.id)
                        chat_link = f"@{entity.username}" if entity.username else "Unknown"
                        chat_name = entity.title
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–≥–∞ {chat}: {e}")
                updated_chats.append(f"{chat_id} | {chat_link} | {chat_name}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            self.chats = updated_chats
            self.save_chats()
            return updated_chats
        return []

    def save_chats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª."""
        with open(self.chats_file, "w") as file:
            file.write("\n".join(self.chats))

    async def resolve_chat_info(self, chat):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–≥ (@examplegroup) –∏–ª–∏ ID –≤ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "ID | @username | –ù–∞–∑–≤–∞–Ω–∏–µ".
        """
        entity = await self.client.get_entity(chat)
        chat_id = str(entity.id)
        chat_link = f"@{entity.username}" if entity.username else "Unknown"
        chat_name = entity.title
        return f"{chat_id} | {chat_link} | {chat_name}"

    @loader.command()
    async def sxr(self, message):
        """- —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        reply = await message.get_reply_message()
        if not reply:
            await message.edit("<b>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>")
            return
        self.message_to_send = reply
        await message.edit("<b>–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.</b>")

    @loader.command()
    async def psxr(self, message):
        """- –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.message_to_send:
            await message.edit("<b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.</b>")
        else:
            await self.client.send_message(message.chat_id, self.message_to_send)

    @loader.command()
    async def dchat(self, message):
        """- –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å @username –∏–ª–∏ chat_id)"""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("<b>–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ chat_id —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</b>")
            return

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥ –∏–ª–∏ ID –≤ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            chat_info = await self.resolve_chat_info(args)

            chat_id = chat_info.split(" | ")[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID
            if chat_id not in [c.split(" | ")[0] for c in self.chats]:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                self.chats.append(chat_info)
                self.save_chats()
                await message.edit(f"<b>–ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n<code>{chat_info}</code>")
            else:
                await message.edit(f"<b>–ß–∞—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n<code>{chat_info}</code>")

        except Exception as e:
            await message.edit(f"<b>–û—à–∏–±–∫–∞: {e}</b>")

    @loader.command()
    async def chatss(self, message):
        """- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not self.chats:
            await message.edit("<b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç.</b>")
        else:
            chat_list = "\n".join(self.chats)
            await message.edit(f"<b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n<code>{chat_list}</code>")

    @loader.command()
    async def delchat(self, message):
        """- —É–¥–∞–ª–∏—Ç—å —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ @username –∏–ª–∏ chat_id)"""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("<b>–£–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ chat_id —á–∞—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>")
            return

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥ –∏–ª–∏ ID –≤ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            chat_info = await self.resolve_chat_info(args)

            chat_id = chat_info.split(" | ")[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID
            if chat_id in [c.split(" | ")[0] for c in self.chats]:
                self.chats = [c for c in self.chats if not c.startswith(chat_id)]
                self.save_chats()
                await message.edit(f"<b>–ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n<code>{chat_info}</code>")
            else:
                await message.edit(f"<b>–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n<code>{chat_info}</code>")

        except Exception as e:
            await message.edit(f"<b>–û—à–∏–±–∫–∞: {e}</b>")

    @loader.command()
    async def updatechats(self, message):
        """- –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ"""
        if not self.chats:
            await message.edit("<b>–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç.</b>")
            return

        updated_chats = []
        for chat in self.chats:
            try:
                # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ ID, —Å—Å—ã–ª–∫—É, –∏–º—è
                parts = chat.split(" | ")
                chat_id = parts[0]  # ID —á–∞—Ç–∞

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                entity = await self.client.get_entity(int(chat_id))
                updated_chats.append(f"{chat_id} | @{entity.username or 'Unknown'} | {entity.title}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat}: {e}")
                updated_chats.append(chat)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.chats = updated_chats
        self.save_chats()
        await message.edit("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>")
